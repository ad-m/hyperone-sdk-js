/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/InlineObject32', 'model/InlineObject33', 'model/InlineObject34', 'model/InlineObject35', 'model/InlineObject36', 'model/Ip'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/InlineObject32'), require('../model/InlineObject33'), require('../model/InlineObject34'), require('../model/InlineObject35'), require('../model/InlineObject36'), require('../model/Ip'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.IpApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.InlineObject32, root.HyperOneApi.InlineObject33, root.HyperOneApi.InlineObject34, root.HyperOneApi.InlineObject35, root.HyperOneApi.InlineObject36, root.HyperOneApi.Ip);
    }
}(this, function(ApiClient, InlineObject32, InlineObject33, InlineObject34, InlineObject35, InlineObject36, Ip) {
    'use strict';

    /**
   * Ip service.
   * @module api/IpApi
   * @version 1
   */

    /**
   * Constructs a new IpApi.
   * @alias module:api/IpApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;



        /**
     * Action :: allocate
     * Action allocate
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject34} opts.inlineObject34
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
        this.actionIpAllocateWithHttpInfo = function(ipId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject34;

            // verify the required parameter 'ipId' is set
            if (ipId === undefined || ipId === null) {
                throw new Error("Missing the required parameter 'ipId' when calling actionIpAllocate");
            }


            const pathParams = {
                ipId: ipId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Ip;

            return this.apiClient.callApi(
                '/ip/{ipId}/actions/allocate', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: allocate
     * Action allocate
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject34} opts.inlineObject34
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
        this.actionIpAllocate = function(ipId, opts) {
            return this.actionIpAllocateWithHttpInfo(ipId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: associate
     * Action associate
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject35} opts.inlineObject35
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
        this.actionIpAssociateWithHttpInfo = function(ipId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject35;

            // verify the required parameter 'ipId' is set
            if (ipId === undefined || ipId === null) {
                throw new Error("Missing the required parameter 'ipId' when calling actionIpAssociate");
            }


            const pathParams = {
                ipId: ipId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Ip;

            return this.apiClient.callApi(
                '/ip/{ipId}/actions/associate', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: associate
     * Action associate
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject35} opts.inlineObject35
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
        this.actionIpAssociate = function(ipId, opts) {
            return this.actionIpAssociateWithHttpInfo(ipId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: disassociate
     * Action disassociate
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
        this.actionIpDisassociateWithHttpInfo = function(ipId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'ipId' is set
            if (ipId === undefined || ipId === null) {
                throw new Error("Missing the required parameter 'ipId' when calling actionIpDisassociate");
            }


            const pathParams = {
                ipId: ipId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Ip;

            return this.apiClient.callApi(
                '/ip/{ipId}/actions/disassociate', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: disassociate
     * Action disassociate
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
        this.actionIpDisassociate = function(ipId, opts) {
            return this.actionIpDisassociateWithHttpInfo(ipId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: release
     * Action release
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
        this.actionIpReleaseWithHttpInfo = function(ipId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'ipId' is set
            if (ipId === undefined || ipId === null) {
                throw new Error("Missing the required parameter 'ipId' when calling actionIpRelease");
            }


            const pathParams = {
                ipId: ipId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Ip;

            return this.apiClient.callApi(
                '/ip/{ipId}/actions/release', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: release
     * Action release
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
        this.actionIpRelease = function(ipId, opts) {
            return this.actionIpReleaseWithHttpInfo(ipId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: transfer
     * Action transfer
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject36} opts.inlineObject36
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
        this.actionIpTransferWithHttpInfo = function(ipId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject36;

            // verify the required parameter 'ipId' is set
            if (ipId === undefined || ipId === null) {
                throw new Error("Missing the required parameter 'ipId' when calling actionIpTransfer");
            }


            const pathParams = {
                ipId: ipId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Ip;

            return this.apiClient.callApi(
                '/ip/{ipId}/actions/transfer', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: transfer
     * Action transfer
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject36} opts.inlineObject36
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
        this.actionIpTransfer = function(ipId, opts) {
            return this.actionIpTransferWithHttpInfo(ipId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Create
     * Create ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject32} opts.inlineObject32
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
        this.createIpWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = opts.inlineObject32;


            const pathParams = {
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Ip;

            return this.apiClient.callApi(
                '/ip', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Create
     * Create ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject32} opts.inlineObject32
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
        this.createIp = function(opts) {
            return this.createIpWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Delete by ID
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
        this.deleteIpWithHttpInfo = function(ipId) {
            const postBody = null;

            // verify the required parameter 'ipId' is set
            if (ipId === undefined || ipId === null) {
                throw new Error("Missing the required parameter 'ipId' when calling deleteIp");
            }


            const pathParams = {
                ipId: ipId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = [];
            const returnType = null;

            return this.apiClient.callApi(
                '/ip/{ipId}', 'DELETE',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Delete by ID
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
        this.deleteIp = function(ipId) {
            return this.deleteIpWithHttpInfo(ipId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * List
     * List ip
     * @param {Object} opts Optional parameters
     * @param {String} opts.mac Filter by mac
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Ip>} and HTTP response
     */
        this.listIpWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = null;


            const pathParams = {
            };
            const queryParams = {
                mac: opts.mac,
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = [Ip];

            return this.apiClient.callApi(
                '/ip', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * List
     * List ip
     * @param {Object} opts Optional parameters
     * @param {String} opts.mac Filter by mac
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Ip>}
     */
        this.listIp = function(opts) {
            return this.listIpWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Find by ID
     * Returns a single ip
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
        this.showIpWithHttpInfo = function(ipId) {
            const postBody = null;

            // verify the required parameter 'ipId' is set
            if (ipId === undefined || ipId === null) {
                throw new Error("Missing the required parameter 'ipId' when calling showIp");
            }


            const pathParams = {
                ipId: ipId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = Ip;

            return this.apiClient.callApi(
                '/ip/{ipId}', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Find by ID
     * Returns a single ip
     * @param {String} ipId ID of ip
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
        this.showIp = function(ipId) {
            return this.showIpWithHttpInfo(ipId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Update by ID
     * Returns modified ip
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject33} opts.inlineObject33
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ip} and HTTP response
     */
        this.updateIpWithHttpInfo = function(ipId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject33;

            // verify the required parameter 'ipId' is set
            if (ipId === undefined || ipId === null) {
                throw new Error("Missing the required parameter 'ipId' when calling updateIp");
            }


            const pathParams = {
                ipId: ipId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Ip;

            return this.apiClient.callApi(
                '/ip/{ipId}', 'PATCH',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Update by ID
     * Returns modified ip
     * @param {String} ipId ID of ip
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject33} opts.inlineObject33
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ip}
     */
        this.updateIp = function(ipId, opts) {
            return this.updateIpWithHttpInfo(ipId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };
    };

    return exports;
}));
