/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD.
        define(['expect.js', '../../src/index'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        factory(require('expect.js'), require('../../src/index'));
    } else {
    // Browser globals (root is window)
        factory(root.expect, root.HyperOneApi);
    }
}(this, function(expect, HyperOneApi) {
    'use strict';

    let instance;

    beforeEach(function() {
        instance = new HyperOneApi.VmDisk();
    });

    const getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
        if (typeof object[getter] === 'function')
            return object[getter]();
        return object[property];
    };

    const setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
        if (typeof object[setter] === 'function')
            object[setter](value);
        else
            object[property] = value;
    };

    describe('VmDisk', function() {
        it('should create an instance of VmDisk', function() {
            // uncomment below and update the code to test VmDisk
            //var instance = new HyperOneApi.VmDisk();
            //expect(instance).to.be.a(HyperOneApi.VmDisk);
        });

        it('should have the property id (base name: "id")', function() {
            // uncomment below and update the code to test the property id
            //var instance = new HyperOneApi.VmDisk();
            //expect(instance).to.be();
        });

        it('should have the property size (base name: "size")', function() {
            // uncomment below and update the code to test the property size
            //var instance = new HyperOneApi.VmDisk();
            //expect(instance).to.be();
        });

        it('should have the property service (base name: "service")', function() {
            // uncomment below and update the code to test the property service
            //var instance = new HyperOneApi.VmDisk();
            //expect(instance).to.be();
        });

        it('should have the property name (base name: "name")', function() {
            // uncomment below and update the code to test the property name
            //var instance = new HyperOneApi.VmDisk();
            //expect(instance).to.be();
        });

        it('should have the property cloud (base name: "cloud")', function() {
            // uncomment below and update the code to test the property cloud
            //var instance = new HyperOneApi.VmDisk();
            //expect(instance).to.be();
        });

    });

}));
