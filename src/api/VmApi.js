/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/InlineObject26', 'model/InlineObject27', 'model/InlineObject28', 'model/InlineObject29', 'model/InlineObject30', 'model/InlineObject31', 'model/Vm'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/InlineObject26'), require('../model/InlineObject27'), require('../model/InlineObject28'), require('../model/InlineObject29'), require('../model/InlineObject30'), require('../model/InlineObject31'), require('../model/Vm'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.VmApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.InlineObject26, root.HyperOneApi.InlineObject27, root.HyperOneApi.InlineObject28, root.HyperOneApi.InlineObject29, root.HyperOneApi.InlineObject30, root.HyperOneApi.InlineObject31, root.HyperOneApi.Vm);
    }
}(this, function(ApiClient, InlineObject26, InlineObject27, InlineObject28, InlineObject29, InlineObject30, InlineObject31, Vm) {
    'use strict';

    /**
   * Vm service.
   * @module api/VmApi
   * @version 1
   */

    /**
   * Constructs a new VmApi.
   * @alias module:api/VmApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;



        /**
     * Action :: flavour
     * Action flavour
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject31} opts.inlineObject31
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.actionVmFlavourWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject31;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling actionVmFlavour");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}/actions/flavour', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: flavour
     * Action flavour
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject31} opts.inlineObject31
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.actionVmFlavour = function(vmId, opts) {
            return this.actionVmFlavourWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: image
     * Action image
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject30} opts.inlineObject30
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.actionVmImageWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject30;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling actionVmImage");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}/actions/image', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: image
     * Action image
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject30} opts.inlineObject30
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.actionVmImage = function(vmId, opts) {
            return this.actionVmImageWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: password_reset
     * Action password_reset
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject29} opts.inlineObject29
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.actionVmPasswordResetWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject29;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling actionVmPasswordReset");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}/actions/password_reset', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: password_reset
     * Action password_reset
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject29} opts.inlineObject29
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.actionVmPasswordReset = function(vmId, opts) {
            return this.actionVmPasswordResetWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: rename
     * Action rename
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject28} opts.inlineObject28
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.actionVmRenameWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject28;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling actionVmRename");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}/actions/rename', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: rename
     * Action rename
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject28} opts.inlineObject28
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.actionVmRename = function(vmId, opts) {
            return this.actionVmRenameWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: restart
     * Action restart
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.actionVmRestartWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling actionVmRestart");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}/actions/restart', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: restart
     * Action restart
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.actionVmRestart = function(vmId, opts) {
            return this.actionVmRestartWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: start
     * Action start
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.actionVmStartWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling actionVmStart");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}/actions/start', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: start
     * Action start
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.actionVmStart = function(vmId, opts) {
            return this.actionVmStartWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: stop
     * Action stop
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.actionVmStopWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling actionVmStop");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}/actions/stop', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: stop
     * Action stop
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.actionVmStop = function(vmId, opts) {
            return this.actionVmStopWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: turnoff
     * Action turnoff
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.actionVmTurnoffWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling actionVmTurnoff");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}/actions/turnoff', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: turnoff
     * Action turnoff
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.actionVmTurnoff = function(vmId, opts) {
            return this.actionVmTurnoffWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Create
     * Create vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject26} opts.inlineObject26
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.createVmWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = opts.inlineObject26;


            const pathParams = {
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Create
     * Create vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject26} opts.inlineObject26
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.createVm = function(opts) {
            return this.createVmWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Delete by ID
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
        this.deleteVmWithHttpInfo = function(vmId) {
            const postBody = null;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling deleteVm");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = [];
            const returnType = null;

            return this.apiClient.callApi(
                '/vm/{vmId}', 'DELETE',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Delete by ID
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
        this.deleteVm = function(vmId) {
            return this.deleteVmWithHttpInfo(vmId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * List
     * List vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vm>} and HTTP response
     */
        this.listVmWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = null;


            const pathParams = {
            };
            const queryParams = {
                name: opts.name,
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = [Vm];

            return this.apiClient.callApi(
                '/vm', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * List
     * List vm
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vm>}
     */
        this.listVm = function(opts) {
            return this.listVmWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Find by ID
     * Returns a single vm
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.showVmWithHttpInfo = function(vmId) {
            const postBody = null;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling showVm");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Find by ID
     * Returns a single vm
     * @param {String} vmId ID of vm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.showVm = function(vmId) {
            return this.showVmWithHttpInfo(vmId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Update by ID
     * Returns modified vm
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject27} opts.inlineObject27
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vm} and HTTP response
     */
        this.updateVmWithHttpInfo = function(vmId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject27;

            // verify the required parameter 'vmId' is set
            if (vmId === undefined || vmId === null) {
                throw new Error("Missing the required parameter 'vmId' when calling updateVm");
            }


            const pathParams = {
                vmId: vmId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vm;

            return this.apiClient.callApi(
                '/vm/{vmId}', 'PATCH',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Update by ID
     * Returns modified vm
     * @param {String} vmId ID of vm
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject27} opts.inlineObject27
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vm}
     */
        this.updateVm = function(vmId, opts) {
            return this.updateVmWithHttpInfo(vmId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };
    };

    return exports;
}));
