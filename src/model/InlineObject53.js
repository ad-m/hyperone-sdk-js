/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.InlineObject53 = factory(root.HyperOneApi.ApiClient);
    }
}(this, function(ApiClient) {
    'use strict';



    /**
   * The InlineObject53 model module.
   * @module model/InlineObject53
   * @version 1
   */

    /**
   * Constructs a new <code>InlineObject53</code>.
   * @alias module:model/InlineObject53
   * @class
   * @param image {String}
   */
    const exports = function(image) {
        const _this = this;

        _this.image = image;
    };

    /**
   * Constructs a <code>InlineObject53</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InlineObject53} obj Optional instance to populate.
   * @return {module:model/InlineObject53} The populated <code>InlineObject53</code> instance.
   */
    exports.constructFromObject = function(data, obj) {
        if (data) {
            obj = obj || new exports();
            if (data.hasOwnProperty('image')) {
                obj.image = ApiClient.convertToType(data.image, 'String');
            }
            if (data.hasOwnProperty('vmhost')) {
                obj.vmhost = ApiClient.convertToType(data.vmhost, 'String');
            }
        }
        return obj;
    };

    /**
   * @member {String} image
   */
    exports.prototype.image = undefined;
    /**
   * @member {String} vmhost
   */
    exports.prototype.vmhost = undefined;



    return exports;
}));


