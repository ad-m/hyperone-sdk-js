/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineObject11', 'model/InlineObject12', 'model/Network'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineObject11'), require('../model/InlineObject12'), require('../model/Network'));
  } else {
    // Browser globals (root is window)
    if (!root.HyperOneApi) {
      root.HyperOneApi = {};
    }
    root.HyperOneApi.NetworkApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.InlineObject11, root.HyperOneApi.InlineObject12, root.HyperOneApi.Network);
  }
}(this, function(ApiClient, InlineObject11, InlineObject12, Network) {
  'use strict';

  /**
   * Network service.
   * @module api/NetworkApi
   * @version 1
   */

  /**
   * Constructs a new NetworkApi. 
   * @alias module:api/NetworkApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createNetwork operation.
     * @callback module:api/NetworkApi~createNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Network} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create network
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject11} opts.inlineObject11 
     * @param {module:api/NetworkApi~createNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Network}
     */
    this.createNetwork = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject11'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Network;

      return this.apiClient.callApi(
        '/network', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetwork operation.
     * @callback module:api/NetworkApi~deleteNetworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete by ID
     * @param {String} networkId ID of network
     * @param {module:api/NetworkApi~deleteNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetwork = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/network/{networkId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetwork operation.
     * @callback module:api/NetworkApi~listNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Network>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List network
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {module:api/NetworkApi~listNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Network>}
     */
    this.listNetwork = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Network];

      return this.apiClient.callApi(
        '/network', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the showNetwork operation.
     * @callback module:api/NetworkApi~showNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Network} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by ID
     * Returns a single network
     * @param {String} networkId ID of network
     * @param {module:api/NetworkApi~showNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Network}
     */
    this.showNetwork = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling showNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Network;

      return this.apiClient.callApi(
        '/network/{networkId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetwork operation.
     * @callback module:api/NetworkApi~updateNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Network} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update by ID
     * Returns modified network
     * @param {String} networkId ID of network
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject12} opts.inlineObject12 
     * @param {module:api/NetworkApi~updateNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Network}
     */
    this.updateNetwork = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['inlineObject12'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Project', 'ServiceAccount', 'Session'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Network;

      return this.apiClient.callApi(
        '/network/{networkId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
