/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/InlineObject49', 'model/InlineObject50', 'model/InlineObject51', 'model/InlineObject52', 'model/InlineObject53', 'model/Vmhost'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/InlineObject49'), require('../model/InlineObject50'), require('../model/InlineObject51'), require('../model/InlineObject52'), require('../model/InlineObject53'), require('../model/Vmhost'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.VmhostApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.InlineObject49, root.HyperOneApi.InlineObject50, root.HyperOneApi.InlineObject51, root.HyperOneApi.InlineObject52, root.HyperOneApi.InlineObject53, root.HyperOneApi.Vmhost);
    }
}(this, function(ApiClient, InlineObject49, InlineObject50, InlineObject51, InlineObject52, InlineObject53, Vmhost) {
    'use strict';

    /**
   * Vmhost service.
   * @module api/VmhostApi
   * @version 1
   */

    /**
   * Constructs a new VmhostApi.
   * @alias module:api/VmhostApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;



        /**
     * Action :: moveDisk
     * Action moveDisk
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject51} opts.inlineObject51
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
        this.actionVmhostMoveDiskWithHttpInfo = function(vmhostId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject51;

            // verify the required parameter 'vmhostId' is set
            if (vmhostId === undefined || vmhostId === null) {
                throw new Error("Missing the required parameter 'vmhostId' when calling actionVmhostMoveDisk");
            }


            const pathParams = {
                vmhostId: vmhostId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vmhost;

            return this.apiClient.callApi(
                '/vmhost/{vmhostId}/actions/moveDisk', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: moveDisk
     * Action moveDisk
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject51} opts.inlineObject51
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
        this.actionVmhostMoveDisk = function(vmhostId, opts) {
            return this.actionVmhostMoveDiskWithHttpInfo(vmhostId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: moveISO
     * Action moveISO
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject52} opts.inlineObject52
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
        this.actionVmhostMoveISOWithHttpInfo = function(vmhostId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject52;

            // verify the required parameter 'vmhostId' is set
            if (vmhostId === undefined || vmhostId === null) {
                throw new Error("Missing the required parameter 'vmhostId' when calling actionVmhostMoveISO");
            }


            const pathParams = {
                vmhostId: vmhostId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vmhost;

            return this.apiClient.callApi(
                '/vmhost/{vmhostId}/actions/moveISO', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: moveISO
     * Action moveISO
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject52} opts.inlineObject52
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
        this.actionVmhostMoveISO = function(vmhostId, opts) {
            return this.actionVmhostMoveISOWithHttpInfo(vmhostId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: moveImage
     * Action moveImage
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject53} opts.inlineObject53
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
        this.actionVmhostMoveImageWithHttpInfo = function(vmhostId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject53;

            // verify the required parameter 'vmhostId' is set
            if (vmhostId === undefined || vmhostId === null) {
                throw new Error("Missing the required parameter 'vmhostId' when calling actionVmhostMoveImage");
            }


            const pathParams = {
                vmhostId: vmhostId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vmhost;

            return this.apiClient.callApi(
                '/vmhost/{vmhostId}/actions/moveImage', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: moveImage
     * Action moveImage
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject53} opts.inlineObject53
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
        this.actionVmhostMoveImage = function(vmhostId, opts) {
            return this.actionVmhostMoveImageWithHttpInfo(vmhostId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: moveVM
     * Action moveVM
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject50} opts.inlineObject50
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
        this.actionVmhostMoveVMWithHttpInfo = function(vmhostId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject50;

            // verify the required parameter 'vmhostId' is set
            if (vmhostId === undefined || vmhostId === null) {
                throw new Error("Missing the required parameter 'vmhostId' when calling actionVmhostMoveVM");
            }


            const pathParams = {
                vmhostId: vmhostId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vmhost;

            return this.apiClient.callApi(
                '/vmhost/{vmhostId}/actions/moveVM', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: moveVM
     * Action moveVM
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject50} opts.inlineObject50
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
        this.actionVmhostMoveVM = function(vmhostId, opts) {
            return this.actionVmhostMoveVMWithHttpInfo(vmhostId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Delete by ID
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
        this.deleteVmhostWithHttpInfo = function(vmhostId) {
            const postBody = null;

            // verify the required parameter 'vmhostId' is set
            if (vmhostId === undefined || vmhostId === null) {
                throw new Error("Missing the required parameter 'vmhostId' when calling deleteVmhost");
            }


            const pathParams = {
                vmhostId: vmhostId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = [];
            const returnType = null;

            return this.apiClient.callApi(
                '/vmhost/{vmhostId}', 'DELETE',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Delete by ID
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
        this.deleteVmhost = function(vmhostId) {
            return this.deleteVmhostWithHttpInfo(vmhostId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * List
     * List vmhost
     * @param {Object} opts Optional parameters
     * @param {String} opts.enabledServices Filter by enabledServices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vmhost>} and HTTP response
     */
        this.listVmhostWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = null;


            const pathParams = {
            };
            const queryParams = {
                enabledServices: opts.enabledServices,
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = [Vmhost];

            return this.apiClient.callApi(
                '/vmhost', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * List
     * List vmhost
     * @param {Object} opts Optional parameters
     * @param {String} opts.enabledServices Filter by enabledServices
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vmhost>}
     */
        this.listVmhost = function(opts) {
            return this.listVmhostWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Find by ID
     * Returns a single vmhost
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
        this.showVmhostWithHttpInfo = function(vmhostId) {
            const postBody = null;

            // verify the required parameter 'vmhostId' is set
            if (vmhostId === undefined || vmhostId === null) {
                throw new Error("Missing the required parameter 'vmhostId' when calling showVmhost");
            }


            const pathParams = {
                vmhostId: vmhostId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = Vmhost;

            return this.apiClient.callApi(
                '/vmhost/{vmhostId}', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Find by ID
     * Returns a single vmhost
     * @param {String} vmhostId ID of vmhost
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
        this.showVmhost = function(vmhostId) {
            return this.showVmhostWithHttpInfo(vmhostId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Update by ID
     * Returns modified vmhost
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject49} opts.inlineObject49
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vmhost} and HTTP response
     */
        this.updateVmhostWithHttpInfo = function(vmhostId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject49;

            // verify the required parameter 'vmhostId' is set
            if (vmhostId === undefined || vmhostId === null) {
                throw new Error("Missing the required parameter 'vmhostId' when calling updateVmhost");
            }


            const pathParams = {
                vmhostId: vmhostId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vmhost;

            return this.apiClient.callApi(
                '/vmhost/{vmhostId}', 'PATCH',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Update by ID
     * Returns modified vmhost
     * @param {String} vmhostId ID of vmhost
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject49} opts.inlineObject49
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vmhost}
     */
        this.updateVmhost = function(vmhostId, opts) {
            return this.updateVmhostWithHttpInfo(vmhostId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };
    };

    return exports;
}));
