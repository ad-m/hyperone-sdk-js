/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/InlineObject13', 'model/InlineObject14', 'model/InlineObject15', 'model/Netgw'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/InlineObject13'), require('../model/InlineObject14'), require('../model/InlineObject15'), require('../model/Netgw'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.NetgwApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.InlineObject13, root.HyperOneApi.InlineObject14, root.HyperOneApi.InlineObject15, root.HyperOneApi.Netgw);
    }
}(this, function(ApiClient, InlineObject13, InlineObject14, InlineObject15, Netgw) {
    'use strict';

    /**
   * Netgw service.
   * @module api/NetgwApi
   * @version 1
   */

    /**
   * Constructs a new NetgwApi.
   * @alias module:api/NetgwApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;



        /**
     * Action :: attach
     * Action attach
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject15} opts.inlineObject15
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
        this.actionNetgwAttachWithHttpInfo = function(netgwId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject15;

            // verify the required parameter 'netgwId' is set
            if (netgwId === undefined || netgwId === null) {
                throw new Error("Missing the required parameter 'netgwId' when calling actionNetgwAttach");
            }


            const pathParams = {
                netgwId: netgwId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Netgw;

            return this.apiClient.callApi(
                '/netgw/{netgwId}/actions/attach', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: attach
     * Action attach
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject15} opts.inlineObject15
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
        this.actionNetgwAttach = function(netgwId, opts) {
            return this.actionNetgwAttachWithHttpInfo(netgwId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: detach
     * Action detach
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
        this.actionNetgwDetachWithHttpInfo = function(netgwId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'netgwId' is set
            if (netgwId === undefined || netgwId === null) {
                throw new Error("Missing the required parameter 'netgwId' when calling actionNetgwDetach");
            }


            const pathParams = {
                netgwId: netgwId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Netgw;

            return this.apiClient.callApi(
                '/netgw/{netgwId}/actions/detach', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: detach
     * Action detach
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
        this.actionNetgwDetach = function(netgwId, opts) {
            return this.actionNetgwDetachWithHttpInfo(netgwId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Create
     * Create netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject13} opts.inlineObject13
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
        this.createNetgwWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = opts.inlineObject13;


            const pathParams = {
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Netgw;

            return this.apiClient.callApi(
                '/netgw', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Create
     * Create netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject13} opts.inlineObject13
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
        this.createNetgw = function(opts) {
            return this.createNetgwWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Delete by ID
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
        this.deleteNetgwWithHttpInfo = function(netgwId) {
            const postBody = null;

            // verify the required parameter 'netgwId' is set
            if (netgwId === undefined || netgwId === null) {
                throw new Error("Missing the required parameter 'netgwId' when calling deleteNetgw");
            }


            const pathParams = {
                netgwId: netgwId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = [];
            const returnType = null;

            return this.apiClient.callApi(
                '/netgw/{netgwId}', 'DELETE',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Delete by ID
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
        this.deleteNetgw = function(netgwId) {
            return this.deleteNetgwWithHttpInfo(netgwId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * List
     * List netgw
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Netgw>} and HTTP response
     */
        this.listNetgwWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = null;


            const pathParams = {
            };
            const queryParams = {
                name: opts.name,
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = [Netgw];

            return this.apiClient.callApi(
                '/netgw', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * List
     * List netgw
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Netgw>}
     */
        this.listNetgw = function(opts) {
            return this.listNetgwWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Find by ID
     * Returns a single netgw
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
        this.showNetgwWithHttpInfo = function(netgwId) {
            const postBody = null;

            // verify the required parameter 'netgwId' is set
            if (netgwId === undefined || netgwId === null) {
                throw new Error("Missing the required parameter 'netgwId' when calling showNetgw");
            }


            const pathParams = {
                netgwId: netgwId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = Netgw;

            return this.apiClient.callApi(
                '/netgw/{netgwId}', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Find by ID
     * Returns a single netgw
     * @param {String} netgwId ID of netgw
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
        this.showNetgw = function(netgwId) {
            return this.showNetgwWithHttpInfo(netgwId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Update by ID
     * Returns modified netgw
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject14} opts.inlineObject14
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Netgw} and HTTP response
     */
        this.updateNetgwWithHttpInfo = function(netgwId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject14;

            // verify the required parameter 'netgwId' is set
            if (netgwId === undefined || netgwId === null) {
                throw new Error("Missing the required parameter 'netgwId' when calling updateNetgw");
            }


            const pathParams = {
                netgwId: netgwId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Netgw;

            return this.apiClient.callApi(
                '/netgw/{netgwId}', 'PATCH',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Update by ID
     * Returns modified netgw
     * @param {String} netgwId ID of netgw
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject14} opts.inlineObject14
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Netgw}
     */
        this.updateNetgw = function(netgwId, opts) {
            return this.updateNetgwWithHttpInfo(netgwId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };
    };

    return exports;
}));
