/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/InlineObject37', 'model/InlineObject38', 'model/InlineObject39', 'model/InlineObject40', 'model/Vault'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/InlineObject37'), require('../model/InlineObject38'), require('../model/InlineObject39'), require('../model/InlineObject40'), require('../model/Vault'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.VaultApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.InlineObject37, root.HyperOneApi.InlineObject38, root.HyperOneApi.InlineObject39, root.HyperOneApi.InlineObject40, root.HyperOneApi.Vault);
    }
}(this, function(ApiClient, InlineObject37, InlineObject38, InlineObject39, InlineObject40, Vault) {
    'use strict';

    /**
   * Vault service.
   * @module api/VaultApi
   * @version 1
   */

    /**
   * Constructs a new VaultApi.
   * @alias module:api/VaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;



        /**
     * Action :: resize
     * Action resize
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject39} opts.inlineObject39
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
        this.actionVaultResizeWithHttpInfo = function(vaultId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject39;

            // verify the required parameter 'vaultId' is set
            if (vaultId === undefined || vaultId === null) {
                throw new Error("Missing the required parameter 'vaultId' when calling actionVaultResize");
            }


            const pathParams = {
                vaultId: vaultId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vault;

            return this.apiClient.callApi(
                '/vault/{vaultId}/actions/resize', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: resize
     * Action resize
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject39} opts.inlineObject39
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
        this.actionVaultResize = function(vaultId, opts) {
            return this.actionVaultResizeWithHttpInfo(vaultId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: snapshot
     * Action snapshot
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject40} opts.inlineObject40
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
        this.actionVaultSnapshotWithHttpInfo = function(vaultId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject40;

            // verify the required parameter 'vaultId' is set
            if (vaultId === undefined || vaultId === null) {
                throw new Error("Missing the required parameter 'vaultId' when calling actionVaultSnapshot");
            }


            const pathParams = {
                vaultId: vaultId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vault;

            return this.apiClient.callApi(
                '/vault/{vaultId}/actions/snapshot', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: snapshot
     * Action snapshot
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject40} opts.inlineObject40
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
        this.actionVaultSnapshot = function(vaultId, opts) {
            return this.actionVaultSnapshotWithHttpInfo(vaultId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: start
     * Action start
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
        this.actionVaultStartWithHttpInfo = function(vaultId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'vaultId' is set
            if (vaultId === undefined || vaultId === null) {
                throw new Error("Missing the required parameter 'vaultId' when calling actionVaultStart");
            }


            const pathParams = {
                vaultId: vaultId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vault;

            return this.apiClient.callApi(
                '/vault/{vaultId}/actions/start', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: start
     * Action start
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
        this.actionVaultStart = function(vaultId, opts) {
            return this.actionVaultStartWithHttpInfo(vaultId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: stop
     * Action stop
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
        this.actionVaultStopWithHttpInfo = function(vaultId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'vaultId' is set
            if (vaultId === undefined || vaultId === null) {
                throw new Error("Missing the required parameter 'vaultId' when calling actionVaultStop");
            }


            const pathParams = {
                vaultId: vaultId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vault;

            return this.apiClient.callApi(
                '/vault/{vaultId}/actions/stop', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: stop
     * Action stop
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
        this.actionVaultStop = function(vaultId, opts) {
            return this.actionVaultStopWithHttpInfo(vaultId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Create
     * Create vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject37} opts.inlineObject37
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
        this.createVaultWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = opts.inlineObject37;


            const pathParams = {
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vault;

            return this.apiClient.callApi(
                '/vault', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Create
     * Create vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject37} opts.inlineObject37
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
        this.createVault = function(opts) {
            return this.createVaultWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Delete by ID
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
        this.deleteVaultWithHttpInfo = function(vaultId) {
            const postBody = null;

            // verify the required parameter 'vaultId' is set
            if (vaultId === undefined || vaultId === null) {
                throw new Error("Missing the required parameter 'vaultId' when calling deleteVault");
            }


            const pathParams = {
                vaultId: vaultId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = [];
            const returnType = null;

            return this.apiClient.callApi(
                '/vault/{vaultId}', 'DELETE',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Delete by ID
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
        this.deleteVault = function(vaultId) {
            return this.deleteVaultWithHttpInfo(vaultId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * List
     * List vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Vault>} and HTTP response
     */
        this.listVaultWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = null;


            const pathParams = {
            };
            const queryParams = {
                name: opts.name,
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = [Vault];

            return this.apiClient.callApi(
                '/vault', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * List
     * List vault
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Vault>}
     */
        this.listVault = function(opts) {
            return this.listVaultWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Find by ID
     * Returns a single vault
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
        this.showVaultWithHttpInfo = function(vaultId) {
            const postBody = null;

            // verify the required parameter 'vaultId' is set
            if (vaultId === undefined || vaultId === null) {
                throw new Error("Missing the required parameter 'vaultId' when calling showVault");
            }


            const pathParams = {
                vaultId: vaultId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = Vault;

            return this.apiClient.callApi(
                '/vault/{vaultId}', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Find by ID
     * Returns a single vault
     * @param {String} vaultId ID of vault
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
        this.showVault = function(vaultId) {
            return this.showVaultWithHttpInfo(vaultId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Update by ID
     * Returns modified vault
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject38} opts.inlineObject38
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Vault} and HTTP response
     */
        this.updateVaultWithHttpInfo = function(vaultId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject38;

            // verify the required parameter 'vaultId' is set
            if (vaultId === undefined || vaultId === null) {
                throw new Error("Missing the required parameter 'vaultId' when calling updateVault");
            }


            const pathParams = {
                vaultId: vaultId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Vault;

            return this.apiClient.callApi(
                '/vault/{vaultId}', 'PATCH',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Update by ID
     * Returns modified vault
     * @param {String} vaultId ID of vault
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject38} opts.inlineObject38
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Vault}
     */
        this.updateVault = function(vaultId, opts) {
            return this.updateVaultWithHttpInfo(vaultId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };
    };

    return exports;
}));
