/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/Firewall', 'model/InlineObject10', 'model/InlineObject7', 'model/InlineObject8', 'model/InlineObject9'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/Firewall'), require('../model/InlineObject10'), require('../model/InlineObject7'), require('../model/InlineObject8'), require('../model/InlineObject9'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.FirewallApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.Firewall, root.HyperOneApi.InlineObject10, root.HyperOneApi.InlineObject7, root.HyperOneApi.InlineObject8, root.HyperOneApi.InlineObject9);
    }
}(this, function(ApiClient, Firewall, InlineObject10, InlineObject7, InlineObject8, InlineObject9) {
    'use strict';

    /**
   * Firewall service.
   * @module api/FirewallApi
   * @version 1
   */

    /**
   * Constructs a new FirewallApi.
   * @alias module:api/FirewallApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;



        /**
     * Action :: attach
     * Action attach
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject9} opts.inlineObject9
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
        this.actionFirewallAttachWithHttpInfo = function(firewallId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject9;

            // verify the required parameter 'firewallId' is set
            if (firewallId === undefined || firewallId === null) {
                throw new Error("Missing the required parameter 'firewallId' when calling actionFirewallAttach");
            }


            const pathParams = {
                firewallId: firewallId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Firewall;

            return this.apiClient.callApi(
                '/firewall/{firewallId}/actions/attach', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: attach
     * Action attach
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject9} opts.inlineObject9
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
        this.actionFirewallAttach = function(firewallId, opts) {
            return this.actionFirewallAttachWithHttpInfo(firewallId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: detach
     * Action detach
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
        this.actionFirewallDetachWithHttpInfo = function(firewallId, opts) {
            opts = opts || {};
            const postBody = opts.body;

            // verify the required parameter 'firewallId' is set
            if (firewallId === undefined || firewallId === null) {
                throw new Error("Missing the required parameter 'firewallId' when calling actionFirewallDetach");
            }


            const pathParams = {
                firewallId: firewallId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Firewall;

            return this.apiClient.callApi(
                '/firewall/{firewallId}/actions/detach', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: detach
     * Action detach
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
        this.actionFirewallDetach = function(firewallId, opts) {
            return this.actionFirewallDetachWithHttpInfo(firewallId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Action :: transfer
     * Action transfer
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject10} opts.inlineObject10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
        this.actionFirewallTransferWithHttpInfo = function(firewallId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject10;

            // verify the required parameter 'firewallId' is set
            if (firewallId === undefined || firewallId === null) {
                throw new Error("Missing the required parameter 'firewallId' when calling actionFirewallTransfer");
            }


            const pathParams = {
                firewallId: firewallId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Firewall;

            return this.apiClient.callApi(
                '/firewall/{firewallId}/actions/transfer', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: transfer
     * Action transfer
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject10} opts.inlineObject10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
        this.actionFirewallTransfer = function(firewallId, opts) {
            return this.actionFirewallTransferWithHttpInfo(firewallId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Create
     * Create firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject7} opts.inlineObject7
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
        this.createFirewallWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = opts.inlineObject7;


            const pathParams = {
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Firewall;

            return this.apiClient.callApi(
                '/firewall', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Create
     * Create firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject7} opts.inlineObject7
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
        this.createFirewall = function(opts) {
            return this.createFirewallWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Delete by ID
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
        this.deleteFirewallWithHttpInfo = function(firewallId) {
            const postBody = null;

            // verify the required parameter 'firewallId' is set
            if (firewallId === undefined || firewallId === null) {
                throw new Error("Missing the required parameter 'firewallId' when calling deleteFirewall");
            }


            const pathParams = {
                firewallId: firewallId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = [];
            const returnType = null;

            return this.apiClient.callApi(
                '/firewall/{firewallId}', 'DELETE',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Delete by ID
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
        this.deleteFirewall = function(firewallId) {
            return this.deleteFirewallWithHttpInfo(firewallId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * List
     * List firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Firewall>} and HTTP response
     */
        this.listFirewallWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = null;


            const pathParams = {
            };
            const queryParams = {
                name: opts.name,
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = [Firewall];

            return this.apiClient.callApi(
                '/firewall', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * List
     * List firewall
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Firewall>}
     */
        this.listFirewall = function(opts) {
            return this.listFirewallWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Find by ID
     * Returns a single firewall
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
        this.showFirewallWithHttpInfo = function(firewallId) {
            const postBody = null;

            // verify the required parameter 'firewallId' is set
            if (firewallId === undefined || firewallId === null) {
                throw new Error("Missing the required parameter 'firewallId' when calling showFirewall");
            }


            const pathParams = {
                firewallId: firewallId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = Firewall;

            return this.apiClient.callApi(
                '/firewall/{firewallId}', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Find by ID
     * Returns a single firewall
     * @param {String} firewallId ID of firewall
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
        this.showFirewall = function(firewallId) {
            return this.showFirewallWithHttpInfo(firewallId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Update by ID
     * Returns modified firewall
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject8} opts.inlineObject8
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Firewall} and HTTP response
     */
        this.updateFirewallWithHttpInfo = function(firewallId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject8;

            // verify the required parameter 'firewallId' is set
            if (firewallId === undefined || firewallId === null) {
                throw new Error("Missing the required parameter 'firewallId' when calling updateFirewall");
            }


            const pathParams = {
                firewallId: firewallId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Firewall;

            return this.apiClient.callApi(
                '/firewall/{firewallId}', 'PATCH',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Update by ID
     * Returns modified firewall
     * @param {String} firewallId ID of firewall
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject8} opts.inlineObject8
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Firewall}
     */
        this.updateFirewall = function(firewallId, opts) {
            return this.updateFirewallWithHttpInfo(firewallId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };
    };

    return exports;
}));
