/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/InlineObject2', 'model/InlineObject3', 'model/InlineObject4', 'model/Organisation'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/InlineObject2'), require('../model/InlineObject3'), require('../model/InlineObject4'), require('../model/Organisation'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.OrganisationApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.InlineObject2, root.HyperOneApi.InlineObject3, root.HyperOneApi.InlineObject4, root.HyperOneApi.Organisation);
    }
}(this, function(ApiClient, InlineObject2, InlineObject3, InlineObject4, Organisation) {
    'use strict';

    /**
   * Organisation service.
   * @module api/OrganisationApi
   * @version 1
   */

    /**
   * Constructs a new OrganisationApi.
   * @alias module:api/OrganisationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;


        /**
     * Callback function to receive the result of the actionOrganisationTransferAccept operation.
     * @callback module:api/OrganisationApi~actionOrganisationTransferAcceptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

        /**
     * Action :: transfer_accept
     * Action transfer_accept
     * @param {String} organisationId ID of organisation
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject4} opts.inlineObject4
     * @param {module:api/OrganisationApi~actionOrganisationTransferAcceptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
        this.actionOrganisationTransferAccept = function(organisationId, opts, callback) {
            opts = opts || {};
            const postBody = opts.inlineObject4;

            // verify the required parameter 'organisationId' is set
            if (organisationId === undefined || organisationId === null) {
                throw new Error("Missing the required parameter 'organisationId' when calling actionOrganisationTransferAccept");
            }


            const pathParams = {
                organisationId: organisationId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Organisation;

            return this.apiClient.callApi(
                '/organisation/{organisationId}/actions/transfer_accept', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        };

        /**
     * Callback function to receive the result of the createOrganisation operation.
     * @callback module:api/OrganisationApi~createOrganisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

        /**
     * Create
     * Create organisation
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject2} opts.inlineObject2
     * @param {module:api/OrganisationApi~createOrganisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
        this.createOrganisation = function(opts, callback) {
            opts = opts || {};
            const postBody = opts.inlineObject2;


            const pathParams = {
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Organisation;

            return this.apiClient.callApi(
                '/organisation', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        };

        /**
     * Callback function to receive the result of the listOrganisation operation.
     * @callback module:api/OrganisationApi~listOrganisationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organisation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

        /**
     * List
     * List organisation
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @param {String} opts.billingCompany Filter by billing.company
     * @param {String} opts.limit Filter by $limit
     * @param {String} opts.active Filter by active
     * @param {module:api/OrganisationApi~listOrganisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organisation>}
     */
        this.listOrganisation = function(opts, callback) {
            opts = opts || {};
            const postBody = null;


            const pathParams = {
            };
            const queryParams = {
                name: opts.name,
                'billing.company': opts.billingCompany,
                $limit: opts.limit,
                active: opts.active,
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = [Organisation];

            return this.apiClient.callApi(
                '/organisation', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        };

        /**
     * Callback function to receive the result of the showOrganisation operation.
     * @callback module:api/OrganisationApi~showOrganisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

        /**
     * Find by ID
     * Returns a single organisation
     * @param {String} organisationId ID of organisation
     * @param {module:api/OrganisationApi~showOrganisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
        this.showOrganisation = function(organisationId, callback) {
            const postBody = null;

            // verify the required parameter 'organisationId' is set
            if (organisationId === undefined || organisationId === null) {
                throw new Error("Missing the required parameter 'organisationId' when calling showOrganisation");
            }


            const pathParams = {
                organisationId: organisationId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = Organisation;

            return this.apiClient.callApi(
                '/organisation/{organisationId}', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        };

        /**
     * Callback function to receive the result of the updateOrganisation operation.
     * @callback module:api/OrganisationApi~updateOrganisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

        /**
     * Update by ID
     * Returns modified organisation
     * @param {String} organisationId ID of organisation
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject3} opts.inlineObject3
     * @param {module:api/OrganisationApi~updateOrganisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
        this.updateOrganisation = function(organisationId, opts, callback) {
            opts = opts || {};
            const postBody = opts.inlineObject3;

            // verify the required parameter 'organisationId' is set
            if (organisationId === undefined || organisationId === null) {
                throw new Error("Missing the required parameter 'organisationId' when calling updateOrganisation");
            }


            const pathParams = {
                organisationId: organisationId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Organisation;

            return this.apiClient.callApi(
                '/organisation/{organisationId}', 'PATCH',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType, callback
            );
        };
    };

    return exports;
}));
