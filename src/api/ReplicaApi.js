/**
 * HyperOne API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
        define(['ApiClient', 'model/InlineObject54', 'model/InlineObject55', 'model/Replica'], factory);
    } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require('../ApiClient'), require('../model/InlineObject54'), require('../model/InlineObject55'), require('../model/Replica'));
    } else {
    // Browser globals (root is window)
        if (!root.HyperOneApi) {
            root.HyperOneApi = {};
        }
        root.HyperOneApi.ReplicaApi = factory(root.HyperOneApi.ApiClient, root.HyperOneApi.InlineObject54, root.HyperOneApi.InlineObject55, root.HyperOneApi.Replica);
    }
}(this, function(ApiClient, InlineObject54, InlineObject55, Replica) {
    'use strict';

    /**
   * Replica service.
   * @module api/ReplicaApi
   * @version 1
   */

    /**
   * Constructs a new ReplicaApi.
   * @alias module:api/ReplicaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
    const exports = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;



        /**
     * Action :: image
     * Action image
     * @param {String} replicaId ID of replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject55} opts.inlineObject55
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
        this.actionReplicaImageWithHttpInfo = function(replicaId, opts) {
            opts = opts || {};
            const postBody = opts.inlineObject55;

            // verify the required parameter 'replicaId' is set
            if (replicaId === undefined || replicaId === null) {
                throw new Error("Missing the required parameter 'replicaId' when calling actionReplicaImage");
            }


            const pathParams = {
                replicaId: replicaId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Replica;

            return this.apiClient.callApi(
                '/replica/{replicaId}/actions/image', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Action :: image
     * Action image
     * @param {String} replicaId ID of replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject55} opts.inlineObject55
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
        this.actionReplicaImage = function(replicaId, opts) {
            return this.actionReplicaImageWithHttpInfo(replicaId, opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Create
     * Create replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject54} opts.inlineObject54
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
        this.createReplicaWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = opts.inlineObject54;


            const pathParams = {
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = ['application/json'];
            const accepts = ['application/json'];
            const returnType = Replica;

            return this.apiClient.callApi(
                '/replica', 'POST',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Create
     * Create replica
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject54} opts.inlineObject54
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
        this.createReplica = function(opts) {
            return this.createReplicaWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Delete by ID
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
        this.deleteReplicaWithHttpInfo = function(replicaId) {
            const postBody = null;

            // verify the required parameter 'replicaId' is set
            if (replicaId === undefined || replicaId === null) {
                throw new Error("Missing the required parameter 'replicaId' when calling deleteReplica");
            }


            const pathParams = {
                replicaId: replicaId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = [];
            const returnType = null;

            return this.apiClient.callApi(
                '/replica/{replicaId}', 'DELETE',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Delete by ID
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
        this.deleteReplica = function(replicaId) {
            return this.deleteReplicaWithHttpInfo(replicaId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * List
     * List replica
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Replica>} and HTTP response
     */
        this.listReplicaWithHttpInfo = function(opts) {
            opts = opts || {};
            const postBody = null;


            const pathParams = {
            };
            const queryParams = {
                name: opts.name,
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = [Replica];

            return this.apiClient.callApi(
                '/replica', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * List
     * List replica
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Replica>}
     */
        this.listReplica = function(opts) {
            return this.listReplicaWithHttpInfo(opts)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };


        /**
     * Find by ID
     * Returns a single replica
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Replica} and HTTP response
     */
        this.showReplicaWithHttpInfo = function(replicaId) {
            const postBody = null;

            // verify the required parameter 'replicaId' is set
            if (replicaId === undefined || replicaId === null) {
                throw new Error("Missing the required parameter 'replicaId' when calling showReplica");
            }


            const pathParams = {
                replicaId: replicaId,
            };
            const queryParams = {
            };
            const collectionQueryParams = {
            };
            const headerParams = {
            };
            const formParams = {
            };

            const authNames = ['Project', 'ServiceAccount', 'Session'];
            const contentTypes = [];
            const accepts = ['application/json'];
            const returnType = Replica;

            return this.apiClient.callApi(
                '/replica/{replicaId}', 'GET',
                pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
                authNames, contentTypes, accepts, returnType
            );
        };

        /**
     * Find by ID
     * Returns a single replica
     * @param {String} replicaId ID of replica
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Replica}
     */
        this.showReplica = function(replicaId) {
            return this.showReplicaWithHttpInfo(replicaId)
                .then(function(response_and_data) {
                    return response_and_data.data;
                });
        };
    };

    return exports;
}));
